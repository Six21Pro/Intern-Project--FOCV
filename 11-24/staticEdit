import urllib.request
#from urllib.request import urlopen
import re
import requests
from regexs import Regexs


class MyClass:
  numberOrigCharS = 0  #number of original charitable sites
  numberOfOrigCon = 0  #number of original context
  urls = []  # Add a list to store URLs
  charSites = []

  def increment_Char(self):
    MyClass.numberOrigCharS += 1

  def increment_Con(self):
    MyClass.numberOfOrigCon += 1

  def intake(self, added):
    charSites.append(added)

  #def addContext2(self, url, arregex, context):

  
  #def addContext2(self, url, arregex):
  def addContext2(self, url):


    listex = Regexs()
    #print(listex.Regexs())
    arregex = listex.Regexs()
    # Take URL as an argument- its the final list of charitable sites
    #needs arregex as an argument
    #and needs context as an argument
    #should return context array

    contextArray = []
    

    for y in range(
        len(url)):  #this for loop checks every url passed to this function
      print("Y: ",y)
      notCharitable = True

      try:
        response2 = requests.get(url[y], timeout=10)
        #print(f"Status code: {response2.status_code}")  # Debug print
        if response2.status_code == 403:
          print("Hit the 403 check!")
          contextArray.append("could not access the website")
          continue
          #contextArray.append("could not access the website")

        if response2.status_code == 200:
          print("Successful 200 check!")
          htmltext2 = response2.text

        else:
          print(f"Unexpected status code: {response2.status_code}")
          contextArray.append("could not access the website")
          continue
          #contextArray.append("could not access the website")

      except Exception as e:
        print(f"Error with {url[y]}: {e}")
        contextArray.append("could not access the website")
        continue

      #htmlfile2 = urllib.request.urlopen(url[y])
      #response2 = requests.get(url[y])
      #htmltext2 = htmlfile2.read().decode()

      #response2 = requests.get(url[y])

      if response2.status_code != 200:  #this shouldn't happen
        print()
        print("SKIPPING!!!SKIPPING!!!SKIPPING!!!")
        contextArray.append("could not access the website")
        continue
        #return  # Skip URLs with non-200 status codes
      
      for x in range(
          len(arregex
              )):  #this for loop to check every regex passed to this function
        #the above for loop may actually be unnecesary, but I don't want to mess anything up
        arrcomp = arregex[x]  #set arrcomp to one of the regex's
        pattern1 = re.compile(arrcomp)
        if htmltext2 != None:
          print("htmltext2 is not empty")
          here1 = re.findall(pattern1, htmltext2)
          
        if htmltext2 == None:
          print("htmltext2 IS empty")
          continue
        contextCategory = " Category: possibly charitable"  #every url is given this context
        if here1:  #if here1 not empty#it certainly shouldn't be
          #print("here1 is not empty")
          #tempContext = context + contextCategory
          notCharitable = False
          
          tempContext = contextCategory
          
          for y in range(  #y doesn't actually need to be used
              len(arregex)
          ):  #this for loop is responsible for checking if a site contains a link with the word corporate or foundation
            if ((arrcomp == '<a .*? href="[^"].*?corporate.*?">.*?</a>')
                or (arrcomp == '<a .*? href="[^"]*?.foundation.*?">.*?</a>')):

              here2 = re.findall(pattern1, htmltext2)
              if here2:
                contextCategory2 = " Also: this site likely contains a link that leads to a corporate or foundation website"
                tempContext = tempContext + contextCategory2

                break  #if a site does contain the word corporate or foundation, then this prevents us from checking the same url twice and adding any unnecessary context
          if notCharitable is False:
            contextArray.append(tempContext)         
          #contextArray.append(tempContext)

          break  #this prevents us from checking the same url twice and adding any unnecessary context
        if notCharitable is True and x == len(arregex) - 1:
          contextArray.append("No indications of being charitable")
    return contextArray
